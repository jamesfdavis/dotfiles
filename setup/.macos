#!/usr/bin/env bash

# Modern macOS Development Setup
# Optimized for software engineering on macOS Sequoia/Sonoma
# Run with: chmod +x setup.sh && ./setup.sh

set -e

echo "🚀 Starting macOS Development Environment Setup..."

# Close System Settings to prevent conflicts
osascript -e 'tell application "System Settings" to quit' 2>/dev/null || true

# Request admin privileges upfront
sudo -v

# Keep sudo alive
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

###############################################################################
# Essential System Settings                                                   #
###############################################################################

echo "⚙️  Configuring essential system settings..."

# Disable boot sound
sudo nvram SystemAudioVolume=" "

# Save screenshots to Downloads (not Desktop)
defaults write com.apple.screencapture location -string "${HOME}/Downloads"
defaults write com.apple.screencapture type -string "png"
defaults write com.apple.screencapture disable-shadow -bool true

# Show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Disable automatic period/quote/dash substitution (critical for coding)
defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

# Fast keyboard repeat (essential for coding)
defaults write NSGlobalDomain KeyRepeat -int 2
defaults write NSGlobalDomain InitialKeyRepeat -int 15

# Enable full keyboard access for all controls
defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

# Expand save/print panels by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

###############################################################################
# Performance Optimization (FCP + Development)                               #
###############################################################################

echo "🚀 Optimizing system performance for video editing and development..."

# Disable visual effects that can impact performance
defaults write NSGlobalDomain NSUseAnimatedFocusRing -bool false
defaults write com.apple.universalaccess reduceTransparency -bool true
defaults write com.apple.universalaccess reduceMotion -bool false  # Keep motion for FCP previews

# Optimize energy settings for performance
sudo pmset -c sleep 0                    # Never sleep on power
sudo pmset -c displaysleep 30            # Display sleep after 30 min on power
sudo pmset -c disksleep 0                # Never sleep disks on power
sudo pmset -b sleep 15                   # Sleep after 15 min on battery
sudo pmset -b displaysleep 10            # Display sleep after 10 min on battery

# Disable hibernation to free up disk space (equal to RAM size)
sudo pmset -a hibernatemode 0
sudo rm -f /private/var/vm/sleepimage
sudo touch /private/var/vm/sleepimage
sudo chflags uchg /private/var/vm/sleepimage

# Increase window server memory for better graphics performance
sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

###############################################################################
# Finder Configuration                                                        #
###############################################################################

echo "📁 Configuring Finder..."

# Show status bar and path bar
defaults write com.apple.finder ShowStatusBar -bool true
defaults write com.apple.finder ShowPathbar -bool true

# Show hidden files
defaults write com.apple.finder AppleShowAllFiles -bool true

# Keep folders on top when sorting
defaults write com.apple.finder _FXSortFoldersFirst -bool true

# Search current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Disable file extension change warning
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# Avoid creating .DS_Store files on network/USB volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Use list view by default
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

# Show ~/Library folder (useful for development)
chflags nohidden ~/Library && xattr -d com.apple.FinderInfo ~/Library 2>/dev/null || true

###############################################################################
# Dock Configuration                                                          #
###############################################################################

echo "🎯 Configuring Dock..."

# Set dock size and enable autohide
defaults write com.apple.dock tilesize -int 48
defaults write com.apple.dock autohide -bool true
defaults write com.apple.dock autohide-delay -float 0
defaults write com.apple.dock autohide-time-modifier -float 0.5

# Don't show recent apps in dock
defaults write com.apple.dock show-recents -bool false

# Speed up Mission Control
defaults write com.apple.dock expose-animation-duration -float 0.15

###############################################################################
# Terminal & Development Tools                                                #
###############################################################################

echo "💻 Configuring Terminal and development tools..."

# UTF-8 only in Terminal
defaults write com.apple.terminal StringEncodings -array 4

# Enable Secure Keyboard Entry in Terminal
defaults write com.apple.terminal SecureKeyboardEntry -bool true

# Install Homebrew if not present
if ! command -v brew &> /dev/null; then
    echo "📦 Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # Add Homebrew to PATH for Apple Silicon Macs
    if [[ $(uname -m) == "arm64" ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
fi

# Essential development tools
echo "🛠️  Installing essential development tools..."
brew install --quiet git
brew install --quiet node
brew install --quiet python@3.12
brew install --quiet go
brew install --quiet curl
brew install --quiet wget
brew install --quiet jq
brew install --quiet tree
brew install --quiet bat
brew install --quiet fd
brew install --quiet ripgrep
brew install --quiet fzf

# Development applications
echo "📱 Installing development applications..."
brew install --cask --quiet visual-studio-code
brew install --cask --quiet docker
brew install --cask --quiet postman
brew install --cask --quiet iterm2
brew install --cask --quiet sourcetree

# Video editing and media tools
echo "🎬 Installing Final Cut Pro workflow tools..."
brew install --cask --quiet final-cut-pro        # If not already owned
brew install --cask --quiet compressor           # If not already owned
brew install --cask --quiet motion               # If not already owned
brew install --quiet ffmpeg                      # Essential for video processing
brew install --quiet imagemagick                 # Image processing
brew install --quiet exiftool                    # Metadata tools

# Additional media utilities
brew install --cask --quiet handbrake            # Video transcoding
brew install --cask --quiet proxy-audio-device   # Audio routing
brew install --cask --quiet blackhole-2ch        # Virtual audio driver

###############################################################################
# Git Configuration                                                           #
###############################################################################

echo "🔧 Configuring Git..."

# Set up global .gitignore
cat > ~/.gitignore_global << 'EOF'
# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# Node
node_modules/
npm-debug.log*
.npm

# Python
__pycache__/
*.py[cod]
*$py.class
.Python
env/
venv/
.env
EOF

git config --global core.excludesfile ~/.gitignore_global
git config --global init.defaultBranch main
git config --global pull.rebase false
git config --global core.autocrlf input

# Prompt for Git user info
echo -n "Enter your Git username: "
read git_username
echo -n "Enter your Git email: "
read git_email
git config --global user.name "$git_username"
git config --global user.email "$git_email"

###############################################################################
# SSH Configuration                                                           #
###############################################################################

echo "🔐 Setting up SSH..."

# Create SSH directory if it doesn't exist
mkdir -p ~/.ssh
chmod 700 ~/.ssh

# Create SSH config with sensible defaults
cat > ~/.ssh/config << 'EOF'
# Global SSH Configuration
Host *
    AddKeysToAgent yes
    UseKeychain yes
    ServerAliveInterval 60
    ServerAliveCountMax 30

# GitHub
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519
EOF

chmod 600 ~/.ssh/config

# Generate SSH key if it doesn't exist
if [[ ! -f ~/.ssh/id_ed25519 ]]; then
    echo "Generating SSH key..."
    ssh-keygen -t ed25519 -C "$git_email" -f ~/.ssh/id_ed25519 -N ""

    # Add to keychain
    ssh-add --apple-use-keychain ~/.ssh/id_ed25519

    echo "📋 Your public SSH key (copy this to GitHub/GitLab):"
    cat ~/.ssh/id_ed25519.pub
    echo ""
    echo -n "Press Enter to continue..."
    read
fi

###############################################################################
# Shell Configuration (Zsh)                                                   #
###############################################################################

echo "🐚 Configuring Zsh..."

# Install Oh My Zsh if not present
if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
fi

# Create a developer-friendly .zshrc
cat > ~/.zshrc << 'EOF'
# Oh My Zsh configuration
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"
plugins=(git brew macos node npm python docker)

source $ZSH/oh-my-zsh.sh

# Homebrew
if [[ -f "/opt/homebrew/bin/brew" ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
elif [[ -f "/usr/local/bin/brew" ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
fi

# Development aliases
alias ll='ls -la'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias grep='grep --color=auto'
alias cat='bat'
alias find='fd'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline'
alias gd='git diff'

# Node/npm aliases
alias ni='npm install'
alias nid='npm install --save-dev'
alias nr='npm run'
alias ns='npm start'
alias nt='npm test'

# Python aliases
alias python='python3'
alias pip='pip3'

# Docker aliases
alias dc='docker compose'
alias dcup='docker compose up -d'
alias dcdown='docker compose down'
alias dps='docker ps'

# FZF configuration
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'

# Add local bin to PATH
export PATH="$HOME/.local/bin:$PATH"

# Final Cut Pro workflow aliases
alias fcpbackup='cp -R ~/Movies/"Final Cut Pro Backups" ~/Backups/FCP_Backups_$(date +%Y%m%d)'
alias fcpclean='rm -rf ~/Movies/"Final Cut Pro Backups"/*.fcpbundle.backup'
alias proxyclean='find ~/Movies -name "*Proxy*" -type d -exec rm -rf {} +'

# Media processing aliases
alias vid2mp4='ffmpeg -i'
alias vid2prores='ffmpeg -i "$1" -c:v prores_ks -profile:v 3 -c:a pcm_s16le'
alias vidinfo='ffprobe -v quiet -print_format json -show_format -show_streams'

# Node version manager (if using nvm)
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
EOF

###############################################################################
# VS Code Configuration                                                        #
###############################################################################

echo "📝 Configuring VS Code..."

# VS Code settings directory
vscode_settings_dir="$HOME/Library/Application Support/Code/User"
mkdir -p "$vscode_settings_dir"

# Essential VS Code extensions
code_extensions=(
    "ms-python.python"
    "ms-vscode.vscode-typescript-next"
    "bradlc.vscode-tailwindcss"
    "esbenp.prettier-vscode"
    "ms-vscode.vscode-eslint"
    "GitLab.gitlab-workflow"
    "ms-vscode.vscode-git"
    "ms-vscode-remote.remote-containers"
    "ms-azuretools.vscode-docker"
    "rust-lang.rust-analyzer"
    "golang.go"
)

for extension in "${code_extensions[@]}"; do
    code --install-extension "$extension" --force
done

# Basic VS Code settings
cat > "$vscode_settings_dir/settings.json" << 'EOF'
{
    "editor.fontSize": 14,
    "editor.fontFamily": "SF Mono, Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace",
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.wordWrap": "on",
    "editor.minimap.enabled": false,
    "editor.rulers": [80, 120],
    "files.insertFinalNewline": true,
    "files.trimTrailingWhitespace": true,
    "workbench.startupEditor": "newUntitledFile",
    "terminal.integrated.shell.osx": "/bin/zsh",
    "git.autofetch": true,
    "git.confirmSync": false,
    "python.defaultInterpreterPath": "/usr/bin/python3",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": true
    }
}
EOF

###############################################################################
# Final Cut Pro Optimization                                                  #
###############################################################################

echo "🎬 Optimizing Final Cut Pro settings..."

# Create optimized directory structure for FCP
mkdir -p ~/Movies/FCP_Projects
mkdir -p ~/Movies/FCP_Media/Originals
mkdir -p ~/Movies/FCP_Media/Proxies
mkdir -p ~/Movies/FCP_Media/Optimized
mkdir -p ~/Movies/FCP_Media/Renders
mkdir -p ~/Backups/FCP_Backups

# Final Cut Pro preferences for better performance
defaults write com.apple.FinalCut FFPeriodicBackupInterval -int 900    # 15 min backups
defaults write com.apple.FinalCut FFMaximumUndoStackSize -int 100      # Limit undo stack
defaults write com.apple.FinalCut FFEnableProxyMedia -bool true        # Enable proxy workflow
defaults write com.apple.FinalCut FFCreateOptimizedMedia -bool false   # Don't auto-optimize
defaults write com.apple.FinalCut FFBackgroundProcessing -bool true    # Enable background tasks

# Compressor optimizations
defaults write com.apple.Compressor SendCompletedBatches -bool false   # Don't send to background
defaults write com.apple.Compressor AutoLaunchQmaster -bool true       # Auto-launch for distributed encoding

###############################################################################
# Security & Privacy                                                          #
###############################################################################

echo "🔒 Configuring security settings..."

# Require password immediately after sleep
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0

# Enable firewall
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on

###############################################################################
# Cleanup & Restart Services                                                  #
###############################################################################

echo "🧹 Cleaning up and restarting services..."

# Kill affected applications to apply settings
for app in "Dock" "Finder" "SystemUIServer" "Terminal"; do
    killall "${app}" &> /dev/null || true
done

# Clean up Homebrew
brew cleanup

echo ""
echo "✅ Setup complete! Here's what was configured:"
echo ""
echo "🔧 System:"
echo "   • Fast keyboard repeat & disabled autocorrect"
echo "   • Improved Finder settings"
echo "   • Developer-friendly Dock"
echo "   • Performance optimizations for video editing"
echo ""
echo "🛠️  Development:"
echo "   • Homebrew + essential CLI tools"
echo "   • Git with global config"
echo "   • SSH key generated and configured"
echo "   • Zsh with Oh My Zsh"
echo "   • VS Code with essential extensions"
echo ""
echo "🎬 Final Cut Pro:"
echo "   • Organized media directory structure"
echo "   • Performance-optimized FCP settings"
echo "   • Essential video editing tools (ffmpeg, HandBrake)"
echo "   • Media workflow aliases in terminal"
echo ""
echo "📋 Next steps:"
echo "   1. Add your SSH key to GitHub/GitLab:"
echo "      cat ~/.ssh/id_ed25519.pub"
echo "   2. Restart your terminal or run: source ~/.zshrc"
echo "   3. Configure FCP to use ~/Movies/FCP_Media for storage"
echo "   4. Consider external storage for large video projects"
echo "   5. Install additional tools: nvm, pyenv, rbenv"
echo ""
echo "🎥 FCP Workflow Tips:"
echo "   • Use 'fcpbackup' alias to backup projects"
echo "   • Use proxy media for 4K+ footage"
echo "   • Store media on fastest available drive"
echo ""
echo "🔄 Some changes require a logout/restart to take full effect."
